/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.JColorChooser;
import model.*;

/**
 *
 * @author LebedenkoN
 */
public class Main extends javax.swing.JFrame {

    Schema schema = null;
    Element focusedElement = null;
    int x_corection;
    int y_corection;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        elementBox.grabFocus();
    }

    private void enableEditMenuItems() {
        this.addInputMenuItem.setEnabled(true);
        this.addNotMenuItem.setEnabled(true);
        this.addAndMenuItem.setEnabled(true);
        this.addOrMenuItem.setEnabled(true);
        this.addXorMenuItem.setEnabled(true);
    }

    private void processElementAfterInsertion() {
        int schemaElementsSize = schema.getElements().size() - 1;
        Element element = schema.getElements().get(schemaElementsSize);
        element.setX(10);
        element.setY(10);
        elementBox.repaint();
    }

    private Element getElementByCoordinates(int x, int y) {
        if (schema == null) {
            return null;
        }
        for (Element element : schema.getElements()) {
            if (this.matchesCordinates(x, y, element.getX(), element.getY())) {
                return element;
            }
        }
        return null;
    }

    private boolean matchesCordinates(int x, int y, int elementX, int elementY) {
        return x > elementX && x < elementX + elementBox.getZoom()
                && y > elementY && y < elementY + elementBox.getZoom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elementBox = new view.ElementBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newSchemaMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        addInputMenuItem = new javax.swing.JMenuItem();
        addNotMenuItem = new javax.swing.JMenuItem();
        addAndMenuItem = new javax.swing.JMenuItem();
        addOrMenuItem = new javax.swing.JMenuItem();
        addXorMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        changeColorMenuItem = new javax.swing.JMenuItem();
        showValuesMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab nr.5");

        elementBox.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                elementBoxMouseDragged(evt);
            }
        });
        elementBox.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                elementBoxMouseWheelMoved(evt);
            }
        });
        elementBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                elementBoxMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                elementBoxMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                elementBoxMouseReleased(evt);
            }
        });
        elementBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                elementBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout elementBoxLayout = new javax.swing.GroupLayout(elementBox);
        elementBox.setLayout(elementBoxLayout);
        elementBoxLayout.setHorizontalGroup(
            elementBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        elementBoxLayout.setVerticalGroup(
            elementBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        newSchemaMenuItem.setText("Create new schema");
        newSchemaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSchemaMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newSchemaMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        addInputMenuItem.setText("Add Input");
        addInputMenuItem.setEnabled(false);
        addInputMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInputMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(addInputMenuItem);

        addNotMenuItem.setText("Add NOT");
        addNotMenuItem.setEnabled(false);
        addNotMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNotMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(addNotMenuItem);

        addAndMenuItem.setText("Add AND");
        addAndMenuItem.setEnabled(false);
        addAndMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAndMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(addAndMenuItem);

        addOrMenuItem.setText("Add OR");
        addOrMenuItem.setEnabled(false);
        addOrMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(addOrMenuItem);

        addXorMenuItem.setText("Add XOR");
        addXorMenuItem.setEnabled(false);
        addXorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addXorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(addXorMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Settings");

        changeColorMenuItem.setText("Change color");
        changeColorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeColorMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(changeColorMenuItem);

        showValuesMenuItem.setSelected(true);
        showValuesMenuItem.setText("Show results");
        showValuesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showValuesMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(showValuesMenuItem);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(elementBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(elementBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newSchemaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSchemaMenuItemActionPerformed
        this.schema = new Schema();
        schema.addInput();
        schema.addNotElement();
        schema.addNotElement();
        schema.concatElements(1, 2);
        schema.concatElements(2, 3);
        for (Element element : schema.getElements()) {
            element.setX((int) (Math.random() * 333));
            element.setY((int) (Math.random() * 333));
        }
        elementBox.setSchema(schema);
        elementBox.repaint();
        this.enableEditMenuItems();
    }//GEN-LAST:event_newSchemaMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void addInputMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInputMenuItemActionPerformed
        Element input = null;
        schema.addInput();
        input = schema.getElements().get(schema.getElements().size() - 1);
        input.setX(10);
        input.setY(10);
        elementBox.repaint();
    }//GEN-LAST:event_addInputMenuItemActionPerformed

    private void addNotMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNotMenuItemActionPerformed
        schema.addNotElement();
        Element element = schema.getElements().get(schema.getElements().size() - 1);
        element.setX(10);
        element.setY(10);
        elementBox.repaint();
    }//GEN-LAST:event_addNotMenuItemActionPerformed

    private void addAndMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAndMenuItemActionPerformed
        schema.addAndElement();
        this.processElementAfterInsertion();
    }//GEN-LAST:event_addAndMenuItemActionPerformed

    private void addOrMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrMenuItemActionPerformed
        schema.addOrElement();
        this.processElementAfterInsertion();
    }//GEN-LAST:event_addOrMenuItemActionPerformed

    private void addXorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addXorMenuItemActionPerformed
        schema.addXorElement();
        this.processElementAfterInsertion();
    }//GEN-LAST:event_addXorMenuItemActionPerformed

    private void elementBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elementBoxMousePressed
        focusedElement = getElementByCoordinates(evt.getX(), evt.getY());
        elementBox.setFocusedElement(focusedElement);
        elementBox.repaint();
        if (focusedElement != null) {
            x_corection = evt.getX() - focusedElement.getX();
            y_corection = evt.getY() - focusedElement.getY();
        }
    }//GEN-LAST:event_elementBoxMousePressed

    private void elementBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_elementBoxKeyReleased
        if (this.schema == null && this.focusedElement == null) {
            return;
        }

        if (evt.getKeyCode() == 127) {
            schema.removeElement(this.focusedElement.getId());
        }

        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            focusedElement.setX(focusedElement.getX() - 10);
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            focusedElement.setX(focusedElement.getX() + 10);
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            focusedElement.setY(focusedElement.getY() - 10);
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            focusedElement.setY(focusedElement.getY() + 10);
        }

        elementBox.repaint();
    }//GEN-LAST:event_elementBoxKeyReleased

    private void elementBoxMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elementBoxMouseDragged
        if (this.schema == null && this.focusedElement == null) {
            return;
        }

        if (!evt.isControlDown() && !evt.isShiftDown()) {
            focusedElement.setX(evt.getX() - x_corection);
            focusedElement.setY(evt.getY() - y_corection);
            elementBox.repaint();
        }
    }//GEN-LAST:event_elementBoxMouseDragged

    private void elementBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elementBoxMouseClicked
        if (this.schema == null && this.focusedElement == null) {
            return;
        }

        if (evt.getClickCount() <= 1) {
            return;
        }

        if (focusedElement.getClass().equals(Input.class)) {
            focusedElement.setValue(!focusedElement.getValue());
            focusedElement = null;
            elementBox.setFocusedElement(null);
            elementBox.repaint();
        }

    }//GEN-LAST:event_elementBoxMouseClicked

    private void elementBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_elementBoxMouseReleased
        if (this.schema == null && this.focusedElement == null) {
            return;
        }

        Element draggedAtElement = getElementByCoordinates(
                evt.getX(),
                evt.getY()
        );

        if (draggedAtElement == null) {
            return;
        }

        if (evt.isControlDown()) {
            schema.concatElements(
                    focusedElement.getId(),
                    draggedAtElement.getId()
            );
        }

        if (evt.isShiftDown()) {
            schema.deconcatElements(
                    focusedElement.getId(),
                    draggedAtElement.getId()
            );
        }

        elementBox.repaint();

    }//GEN-LAST:event_elementBoxMouseReleased

    private void elementBoxMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_elementBoxMouseWheelMoved
        elementBox.setZoom(
                elementBox.getZoom()
                - evt.getScrollAmount()
                * evt.getWheelRotation()
        );
        elementBox.repaint();
    }//GEN-LAST:event_elementBoxMouseWheelMoved

    private void showValuesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showValuesMenuItemActionPerformed
        elementBox.setShowValues(this.showValuesMenuItem.isSelected());
        elementBox.repaint();
    }//GEN-LAST:event_showValuesMenuItemActionPerformed

    private void changeColorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeColorMenuItemActionPerformed
        Color selectedColor = JColorChooser.showDialog(
                this,
                "Choose color", 
                elementBox.getBorderColor()
        );
        elementBox.setBorderColor(selectedColor);
        elementBox.repaint();
    }//GEN-LAST:event_changeColorMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addAndMenuItem;
    private javax.swing.JMenuItem addInputMenuItem;
    private javax.swing.JMenuItem addNotMenuItem;
    private javax.swing.JMenuItem addOrMenuItem;
    private javax.swing.JMenuItem addXorMenuItem;
    private javax.swing.JMenuItem changeColorMenuItem;
    private view.ElementBox elementBox;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem newSchemaMenuItem;
    private javax.swing.JCheckBoxMenuItem showValuesMenuItem;
    // End of variables declaration//GEN-END:variables
}
